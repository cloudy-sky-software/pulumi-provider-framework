openapi: 3.1.0
info:
  title: Fake API
  version: "2.0"
servers:
  - url: https://api.fake.com
    description: production

components:
  schemas:
    a_string_prop:
      type: string
    an_object_prop:
      type: object
      properties:
        another_prop:
          $ref: "#/components/schemas/a_string_prop"
    request_object_type:
      type: object
      properties:
        simple_prop:
          $ref: "#/components/schemas/a_string_prop"
        object_prop:
          $ref: "#/components/schemas/an_object_prop"
    response_object_type:
      type: object
      properties:
        another_prop:
          $ref: "#/components/schemas/a_string_prop"
    backgroundWorker:
      type: object
      title: BackgroundWorker
      properties:
        simple_prop:
          $ref: "#/components/schemas/a_string_prop"
        object_prop:
          $ref: "#/components/schemas/an_object_prop"
    cronJob:
      type: object
      title: CronJob
      properties:
        simple_prop:
          $ref: "#/components/schemas/a_string_prop"
        object_prop:
          $ref: "#/components/schemas/an_object_prop"
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

paths:
  /v2/fakeresource:
    post:
      operationId: create_fake_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/request_object_type"
      responses:
        "200":
          description: The response for creating a fake resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response_object_type"

  /v2/fakeresource/{resourceId}:
    get:
      operationId: get_fake_resource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response_object_type"
    patch:
      operationId: update_fake_resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/request_object_type"
      responses:
        "200":
          description: The response for updating fake resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response_object_type"
  # Path to test if the last path param is correctly mapped to the
  # resource's `id` property.
  # See cloudy-sky-software/pulumi-provider-framework#199.
  /v2/anotherfakeresource/{some_id}:
    get:
      operationId: get_another_fake_resource
      parameters:
        - name: some_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response_object_type"

  /v2/{baseId}/fakeresource:
    post:
      operationId: create_base_fake_resource
      parameters:
        - name: baseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/request_object_type"
      responses:
        "200":
          description: The response for creating a base fake resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response_object_type"

  /v2/discriminatedresource:
    post:
      operationId: create_discriminated_resource
      requestBody:
        content:
          application/json:
            schema:
              discriminator:
                mapping:
                  background_worker: "#/components/schemas/backgroundWorker"
                  cron_job: "#/components/schemas/cronJob"
                propertyName: type
              oneOf:
                - $ref: "#/components/schemas/backgroundWorker"
                - $ref: "#/components/schemas/cronJob"
      responses:
        "200":
          description: The response for creating a discriminated resource.
          content:
            application/json:
              schema:
                discriminator:
                  mapping:
                    background_worker: "#/components/schemas/backgroundWorker"
                    cron_job: "#/components/schemas/cronJob"
                  propertyName: type
                oneOf:
                  - $ref: "#/components/schemas/backgroundWorker"
                  - $ref: "#/components/schemas/cronJob"

  /v2/discriminatedresource/{resourceId}:
    get:
      operationId: get_discriminated_resource
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                discriminator:
                  mapping:
                    background_worker: "#/components/schemas/backgroundWorker"
                    cron_job: "#/components/schemas/cronJob"
                  propertyName: type
                oneOf:
                  - $ref: "#/components/schemas/backgroundWorker"
                  - $ref: "#/components/schemas/cronJob"
    patch:
      operationId: update_discriminated_resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              discriminator:
                mapping:
                  background_worker: "#/components/schemas/backgroundWorker"
                  cron_job: "#/components/schemas/cronJob"
                propertyName: type
              oneOf:
                - $ref: "#/components/schemas/backgroundWorker"
                - $ref: "#/components/schemas/cronJob"
      responses:
        "200":
          description: The response for updating discriminated resource.
          content:
            application/json:
              schema:
                discriminator:
                  mapping:
                    background_worker: "#/components/schemas/backgroundWorker"
                    cron_job: "#/components/schemas/cronJob"
                  propertyName: type
                oneOf:
                  - $ref: "#/components/schemas/backgroundWorker"
                  - $ref: "#/components/schemas/cronJob"
